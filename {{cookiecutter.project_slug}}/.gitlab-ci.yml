image:
  name: gcr.io/kaniko-project/executor:debug
  pull_policy: if-not-present
  entrypoint: [""]
  
variables:
  COMPONENT: "{{cookiecutter.project_slug}}"
  PROJECT_NAME: "{{cookiecutter.project_slug}}"

  KANIKO_CACHE_ARGS: ""
  VERSIONLABELMETHOD: "OnlyIfThisCommitHasVersion"
  IMAGE_LABELS: >
      --label org.opencontainers.image.vendor=$CI_SERVER_URL/$GITLAB_USER_LOGIN
      --label org.opencontainers.image.authors=$CI_SERVER_URL/$GITLAB_USER_LOGIN
      --label org.opencontainers.image.revision=$CI_COMMIT_SHA
      --label org.opencontainers.image.source=$CI_PROJECT_URL
      --label org.opencontainers.image.documentation=$CI_PROJECT_URL
      --label org.opencontainers.image.licenses=$CI_PROJECT_URL
      --label org.opencontainers.image.url=$CI_PROJECT_URL
      --label vcs-url=$CI_PROJECT_URL
      --label com.gitlab.ci.user=$CI_SERVER_URL/$GITLAB_USER_LOGIN
      --label com.gitlab.ci.email=$GITLAB_USER_EMAIL
      --label com.gitlab.ci.tagorbranch=$CI_COMMIT_REF_NAME
      --label com.gitlab.ci.pipelineurl=$CI_PIPELINE_URL
      --label com.gitlab.ci.commiturl=$CI_PROJECT_URL/commit/$CI_COMMIT_SHA
      --label com.gitlab.ci.cijoburl=$CI_JOB_URL
      --label com.gitlab.ci.mrurl=$CI_PROJECT_URL/-/merge_requests/$CI_MERGE_REQUEST_ID
    
  DOCKER_CI_REGISTRY_IMAGE_BASE: dockerRegistry:PORT/it/"{{cookiecutter.project_slug}}"
  DOCKER_CI_REGISTRY: https://dockerRegistry:PORT/v1/
  DOCKER_CI_REGISTRY_USER: it_docker_deploy
  DOCKER_CI_REGISTRY_PULL: dockerRegistry/it
  

stages:
  - test
  - sonar
  - build

sonarqube-check:
  tags: [dind, docker]
  image:
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint: [""]
  stage: sonar
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar" # Defines the location of the analysis task cache
    GIT_DEPTH: "0" # Tells git to fetch all the branches of the project, required by the analysis task
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script:
    - sonar-scanner
  allow_failure: true
  only:
    - master

unit_test_and_build:
  stage: test
  tags: [dind, docker]
  image:
    name: dockerRegistry/it/kanikoimagebuilder/python:3.13.0-slim
    pull_policy: if-not-present
    # entrypoint: [ '/bin/bash', '-c', 'ln -snf /bin/bash /bin/sh && /bin/bash -c $0' ]
  before_script:
    - echo Installing Hatch
    - uv pip install hatch --system
  variables:
    LOG_LEVEL_{{cookiecutter.project_slug.upper()}}: INFO
    DIR_LOG: "/log"
  script:
    - echo "$ENV_FILE" >> .env
    - hatch version
    #   build ui
    - hatch run dev:buildui
    #   ui tests coverage
    - hatch run dev:vitecov
    - cp ./src/{{cookiecutter.project_slug}}ui/test_output/unit/coverage/lcov.info lcov.info
    #   prepare index.html as jinja template for django test
    - cp ./src/{{cookiecutter.project_slug}}django/static/index.html ./src/{{cookiecutter.project_slug}}django/templates/index.html
    - python ./src/{{cookiecutter.project_slug}}django/format_index_html.py
    #   run django tests
    - hatch run test:cov
    - hatch run test:report
    - hatch run test:reportxml
    - hatch run test:badge
    #   move static files as artificat to next build step
    - mv src/{{cookiecutter.project_slug}}django/static/ static/
  coverage: '/(?i)total.*? (100(?:\.0+)?\%|[1-9]?\d(?:\.\d+)?\%)$/'
  artifacts:
    #   untracked: true
    paths:
      - lcov.info
      - static/
      - coverage.svg
      - coverage.xml
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml

.build_with_kaniko:
  #Hidden job to use as an "extends" template
  stage: build
  tags: [dind, docker]
  dependencies:
    - unit_test_and_build
  rules:
    - if: $CI_COMMIT_TAG
  script:
    - mv static/* src/{{cookiecutter.project_slug}}django/static/
    - cd src/{{cookiecutter.project_slug}}django/static/
    - ls
    - |
      echo "Building and shipping image to $DOCKER_CI_REGISTRY_IMAGE_BASE/$COMPONENT"
      #Build date for opencontainers
      BUILDDATE="'$(date '+%FT%T%z' | sed -E -n 's/(\+[0-9]{2})([0-9]{2})$/\1:\2/p')'" #rfc 3339 date
      IMAGE_LABELS="$IMAGE_LABELS --label org.opencontainers.image.created=$BUILDDATE --label build-date=$BUILDDATE"
      #Description for opencontainers
      BUILDTITLE=$(echo $CI_PROJECT_TITLE | tr " " "_")
      IMAGE_LABELS="$IMAGE_LABELS --label org.opencontainers.image.title=$BUILDTITLE --label org.opencontainers.image.description=$BUILDTITLE"
      #Add ref.name for opencontainers
      IMAGE_LABELS="$IMAGE_LABELS --label org.opencontainers.image.ref.name=$DOCKER_CI_REGISTRY_IMAGE_BASE:$CI_COMMIT_REF_NAME"

      #Build Version Label and Tag from git tag, LastVersionTagInGit was placed by a previous job artifact
      if [[ "$VERSIONLABELMETHOD" == "LastVersionTagInGit" ]]; then VERSIONLABEL=$(cat VERSIONTAG.txt); fi
      if [[ "$VERSIONLABELMETHOD" == "OnlyIfThisCommitHasVersion" ]]; then VERSIONLABEL=$CI_COMMIT_TAG; fi
      if [[ ! -z "$VERSIONLABEL" ]]; then 
        IMAGE_LABELS="$IMAGE_LABELS --label org.opencontainers.image.version=$VERSIONLABEL"
        ADDITIONALTAGLIST="$ADDITIONALTAGLIST $VERSIONLABEL"
      fi


      if [[ -n "$ADDITIONALTAGLIST" ]]; then 
        for TAG in $ADDITIONALTAGLIST; do 
          FORMATTEDTAGLIST="${FORMATTEDTAGLIST} --tag $DOCKER_CI_REGISTRY_IMAGE_BASE/$PROJECT_NAME:$TAG "; 
        done; 
      fi

      #Reformat Docker tags to kaniko's --destination argument:
      FORMATTEDTAGLIST=$(echo "${FORMATTEDTAGLIST}" | sed s/\-\-tag/\-\-destination/g)

      echo "Kaniko arguments to run: --context $CI_PROJECT_DIR --dockerfile $CI_PROJECT_DIR/infra/docker/$COMPONENT/Dockerfile $KANIKO_CACHE_ARGS $FORMATTEDTAGLIST $IMAGE_LABELS"
      mkdir -p /kaniko/.docker
      echo "{\"auths\":{\"$DOCKER_CI_REGISTRY\":{\"auth\":\"$(echo -n $DOCKER_CI_REGISTRY_USER:$DOCKER_CI_REGISTRY_PASSWORD | base64)\"}}}" > /kaniko/.docker/config.json
      cp /etc/gitlab-runner/certs/ca.crt /kaniko/ssl/certs/additional-ca-cert-bundle.crt
      /kaniko/executor --context $CI_PROJECT_DIR --dockerfile $CI_PROJECT_DIR/infra/docker/$COMPONENT/Dockerfile $KANIKO_CACHE_ARGS $FORMATTEDTAGLIST $IMAGE_LABELS

build-{{cookiecutter.project_slug}}:
  extends: .build_with_kaniko
    
test-e2e:
  stage: e2e
  rules:
    - if: $CI_COMMIT_TAG
  image: mcr.microsoft.com/playwright:v1.51.0-noble
  services:
    # https://docs.gitlab.com/ci/services/#how-services-are-linked-to-the-job
    - name: $DOCKER_CI_REGISTRY_PULL/$PROJECT_NAME/$COMPONENT:$CI_COMMIT_TAG
      alias: $PROJECT_NAME
  variables:
    # .env to start the container as a service
    SECRET_KEY: lizpdph7g61h!vprq(oq1z311yky4#c(6^b(9zx36171dnirifto
    ENV: DD
    ALLOWED_HOSTS: $PROJECT_NAME
    {{cookiecutter.project_slug.upper()}}_DB_HOST: oda02.domain-name.com
    {{cookiecutter.project_slug.upper()}}DB_PORT: 1521
    {{cookiecutter.project_slug.upper()}}_DB_SERVICE: srdd.domain-name.com
    {{cookiecutter.project_slug.upper()}}DB_USER: {{cookiecutter.project_slug}}_user
    {{cookiecutter.project_slug.upper()}}_DB_PASSWORD: {{cookiecutter.project_slug}}_pass

  dependencies:
    - build-djangofastergql
  script:
    - curl http://$PROJECT_NAME:8000/
    - npm i ./src/{{cookiecutter.project_slug}}ui
    - npm run --prefix ./src/{{cookiecutter.project_slug}}ui test:e2e
